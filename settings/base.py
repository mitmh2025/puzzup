"""
Django settings for PuzzUp project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import json
import os
from pathlib import Path

import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("PUZZUP_SECRET", "secret-code-goes-here")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [""]

# Application definition

INSTALLED_APPS = [
    "puzzle_editing.apps.PuzzleEditingConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "import_export",
    "sass_processor",
    "django_celery_results",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "puzzle_editing.middleware.TimezoneMiddleware",
]

ROOT_URLCONF = "puzzup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "puzzup.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(default="postgres://localhost:5432/puzzup")
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "puzzle_editing.User"


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"
USE_I18N = False
USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.normpath(Path(BASE_DIR, "static"))
SITE_PASSWORD = os.environ.get("SITE_PASSWORD")


LOGIN_URL = "/accounts/login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_SUBJECT_PREFIX = "[TTBNL PuzzUp] "
DEFAULT_FROM_EMAIL = "noreply@puzzup.ttbnl2024.org"
SERVER_EMAIL = EMAIL_HOST_USER

EMAIL_ENABLED = os.environ.get("EMAIL_ENABLED", "")

# Displayed in testsolving schedule view for authors to request testsolving.
# Might switch to discord.
TESTSOLVE_COORDINATOR_EMAIL = "tc@puzzup.lol"
AUTOPOSTPROD_EMAIL = "no-reply@puzzup.partiallyorde.red"

# Ensure logs directory exists.
LOGS_DIR = BASE_DIR / "logs"
Path(LOGS_DIR).mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django": {"format": "%(asctime)s [%(levelname)s] %(module)s\n%(message)s"},
        "puzzles": {"format": "%(asctime)s [%(levelname)s] %(message)s"},
    },
    "handlers": {
        "django": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": Path(LOGS_DIR, "django.log"),
            "formatter": "django",
        },
        "puzzle": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": Path(LOGS_DIR, "puzzle.log"),
            "formatter": "puzzles",
        },
        "request": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": Path(LOGS_DIR, "request.log"),
            "formatter": "puzzles",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "puzzles",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django"],
            "level": "DEBUG",
            "propagate": True,
        },
        "puzzles.puzzle": {
            "handlers": ["puzzle"],
            "level": "DEBUG",
            "propagate": False,
        },
        "puzzles.request": {
            "handlers": ["request"],
            "level": "DEBUG",
            "propagate": False,
        },
        "puzzle_editing.commands": {
            "handlers": ["console", "django"],
            "level": "DEBUG",
        },
    },
}

# only if you want to do postprodding
HUNT_REPO_NAME = os.environ.get("HUNT_REPO_NAME", "")
HUNT_REPO_URL = f"git@github.com:{HUNT_REPO_NAME}.git"
HUNT_REPO_URL_HTTPS = f"https://github.com/{HUNT_REPO_NAME}"
HUNT_REPO = os.environ.get("HUNT_REPO", "")
HUNT_REPO_PATH = Path(HUNT_REPO)
TMP_REPO_DIR = Path(os.environ.get("TMP_REPO_DIR", ""))
HUNT_REPO_BRANCH = os.environ.get("HUNT_REPO_BRANCH", "main")
SSH_KEY = os.environ.get("SSH_KEY_PATH", "~/.ssh/id_rsa")

HUNT_TIME = datetime.datetime(
    year=2024,
    month=1,
    day=12,
    hour=17,
    minute=0,
    second=0,
    microsecond=0,
    tzinfo=datetime.timezone.utc,
)

# API stuff
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Discord integration
DISCORD_GUILD_ID = os.environ.get("DISCORD_GUILD_ID", "")
DISCORD_BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN", "")
DISCORD_APP_PUBLIC_KEY = os.environ.get("DISCORD_APP_PUBLIC_KEY", "")
DISCORD_CLIENT_ID = os.environ.get("DISCORD_CLIENT_ID", "")
DISCORD_CLIENT_SECRET = os.environ.get("DISCORD_CLIENT_SECRET", "")
DISCORD_OAUTH_SCOPES = "identify email"  # Space-delimited
DISCORD_MANAGE_CHANNELS_ENABLED = True
DISCORD_TESTSOLVE_CHANNEL_ID = os.environ.get("DISCORD_TESTSOLVE_CHANNEL_ID", "")
DISCORD_TESTSOLVE_VC_CAT_ID = os.environ.get("DISCORD_TESTSOLVE_VC_CAT_ID", "")
DISCORD_TESTSOLVE_ADMIN_CHANNEL_ID = os.environ.get(
    "DISCORD_TESTSOLVE_ADMIN_CHANNEL_ID", ""
)
DISCORD_TESTSOLVE_ADMIN_ROLE = os.environ.get("DISCORD_TESTSOLVE_ADMIN_ROLE", "")
DISCORD_FACTCHECK_CHANNEL_ID = os.environ.get("DISCORD_FACTCHECK_CHANNEL_ID", "")
DISCORD_FACTCHECK_ADMIN_CHANNEL_ID = os.environ.get(
    "DISCORD_FACTCHECK_ADMIN_CHANNEL_ID", ""
)
DISCORD_EIC_ALERT_CHANNEL_ID = os.environ.get("DISCORD_EIC_ALERT_CHANNEL_ID", "")
DISCORD_GENERAL_CHANNEL_ID = os.environ.get("DISCORD_GENERAL_CHANNEL_ID", "")
DISCORD_DISC_EDITOR_CHANNEL_ID = os.environ.get("DISCORD_DISC_EDITOR_CHANNEL_ID", "")
DISCORD_POSTPROD_CHANNEL_ID = os.environ.get("DISCORD_POSTPROD_CHANNEL_ID", "")

# Google Integration
DRIVE_SETTINGS = {}
GOOGLE_CREDENTIALS_PATH = os.environ.get("GOOGLE_CREDENTIALS_PATH")
if GOOGLE_CREDENTIALS_PATH:
    credentials_file = Path(GOOGLE_CREDENTIALS_PATH)
    if credentials_file.is_file():
        with credentials_file.open() as f:
            DRIVE_SETTINGS["credentials"] = json.load(f)

GOOGLE_CREDENTIALS = os.environ.get("GOOGLE_CREDENTIALS")
if GOOGLE_CREDENTIALS:
    try:
        DRIVE_SETTINGS["credentials"] = json.loads(GOOGLE_CREDENTIALS)
    except ValueError:
        print("Invalid Google Credentials environment value")

# Folder IDs for new spreadsheets
GOOGLE_FOLDER_DRAFT_ID = os.environ.get("GOOGLE_FOLDER_DRAFT_ID")
GOOGLE_FOLDER_TESTSOLVE_ID = os.environ.get("GOOGLE_FOLDER_TESTSOLVE_ID")
GOOGLE_FOLDER_FACTCHECK_ID = os.environ.get("GOOGLE_FOLDER_FACTCHECK_ID")

QUICKCHECKING_TEMPLATE_ID = os.environ.get("QUICKCHECKING_TEMPLATE_ID")
FACTCHECKING_TEMPLATE_ID = os.environ.get("FACTCHECKING_TEMPLATE_ID")

POSTPROD_BRANCH_URL = os.environ.get("POSTPROD_BRANCH_URL", "")
POSTPROD_URL = os.environ.get("POSTPROD_URL", "")
PROD_URL = os.environ.get("PROD_URL", "")
PUZZUP_URL = "http://localhost:8000"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN", "")

# Redis settings
REDIS_URL = os.environ.get("REDIS_URL", "")

# Celery settings
CELERY_BROKER_URL = REDIS_URL
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "visibility_timeout": 5 * 60,  # 5 minutes
}
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_TASK_TIME_LIMIT = 10 * 60  # 10 minutes
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
