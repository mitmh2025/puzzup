"""
Django settings for PuzzUp project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import datetime
import json
import os
from pathlib import Path

import dj_database_url
from django.contrib import messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("PUZZUP_SECRET", "secret-code-goes-here")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [""]

# Application definition

INSTALLED_APPS = [
    "puzzle_editing.apps.PuzzleEditingConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "import_export",
]

ASGI_APPLICATION = "puzzup_2025.asgi.application"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "puzzle_editing.middleware.timezone_middleware",
]

ROOT_URLCONF = "puzzup_2025.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "puzzle_editing.context_processors.auto_postprodding_enabled",
                "puzzle_editing.context_processors.testsolving_allowed",
                "puzzle_editing.context_processors.site_password_set",
            ],
        },
    },
]

WSGI_APPLICATION = "puzzup_2025.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=os.environ.get("DATABASE_URL", "postgres://localhost:5432/puzzup")
    )
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "puzzle_editing.User"

# Override message tags so we get classes that work with Bulma

MESSAGE_TAGS = {
    messages.ERROR: "is-danger",
    messages.WARNING: "is-warning",
    messages.INFO: "is-info",
    messages.SUCCESS: "is-success",
    messages.DEBUG: "is-info",
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "US/Eastern"
USE_I18N = False
USE_L10N = False
USE_TZ = True
DATETIME_FORMAT = "N j, Y, P e"
TIME_FORMAT = "P e"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.normpath(BASE_DIR / "static")
SITE_PASSWORD = os.environ.get("SITE_PASSWORD")


LOGIN_URL = "/accounts/login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


EMAIL_BACKEND = "django_ses.SESBackend"
AWS_SES_CONFIGURATION_SET = os.environ.get("AWS_SES_CONFIGURATION_SET")

EMAIL_SUBJECT_PREFIX = "[Puzzup] "

DEFAULT_FROM_EMAIL = "puzzup@letswriteahunt.com"
AUTOPOSTPROD_EMAIL = "puzzup@letswriteahunt.com"
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# 1 year, in seconds
SESSION_COOKIE_AGE = 365 * 24 * 60 * 60

# Ensure logs directory exists.
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django": {"format": "%(asctime)s [%(levelname)s] %(module)s\n%(message)s"},
        "puzzles": {"format": "%(asctime)s [%(levelname)s] %(message)s"},
    },
    "handlers": {
        "django": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOGS_DIR / "django.log",
            "formatter": "django",
        },
        "puzzle": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOGS_DIR / "puzzle.log",
            "formatter": "puzzles",
        },
        "request": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOGS_DIR / "request.log",
            "formatter": "puzzles",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "puzzles",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django", "console"],
            "level": "INFO",
            "propagate": True,
        },
        "puzzle_editing": {
            "handlers": ["puzzle", "console"],
            "level": "INFO",
        },
    },
}

# only if you want to do postprodding
HUNT_REPO_URL = os.environ.get("HUNT_REPO_URL", "")
HUNT_REPO = (
    Path(os.environ.get("HUNT_REPO", "")) if os.environ.get("HUNT_REPO") else None
)
HUNT_REPO_BRANCH = os.environ.get("HUNT_REPO_BRANCH", "main")
HUNT_REPO_CLIENT = HUNT_REPO / "client" if HUNT_REPO else None
SSH_KEY = os.environ.get("SSH_KEY_PATH", "~/.ssh/id_rsa")
POSTPROD_BRANCH_URL = os.environ.get("POSTPROD_BRANCH_URL", "")
POSTPROD_URL = os.environ.get("POSTPROD_URL", "")
PROD_URL = os.environ.get("PROD_URL", "")

HUNT_TIME = datetime.datetime(
    year=2025,
    month=1,
    day=17,
    hour=17,
    minute=0,
    second=0,
    microsecond=0,
    tzinfo=datetime.UTC,
)

# Google Drive settings
DRIVE_SETTINGS = {}
credentials_file = BASE_DIR / "credentials/drive-credentials.json"
if credentials_file.is_file():
    with credentials_file.open() as f:
        DRIVE_SETTINGS["credentials"] = json.load(f)
        if "universe_domain" in DRIVE_SETTINGS["credentials"]:
            del DRIVE_SETTINGS["credentials"]["universe_domain"]
TESTSOLVING_FOLDER_ID = os.environ.get("TESTSOLVING_FOLDER_ID")
PUZZLE_DRAFT_FOLDER_ID = os.environ.get("PUZZLE_DRAFT_FOLDER_ID")
PUZZLE_SOLUTION_FOLDER_ID = os.environ.get("PUZZLE_SOLUTION_FOLDER_ID")
PUZZLE_RESOURCES_FOLDER_ID = os.environ.get("PUZZLE_RESOURCES_FOLDER_ID")
FACTCHECKING_FOLDER_ID = os.environ.get("FACTCHECKING_FOLDER_ID")
FACTCHECKING_TEMPLATE_ID = os.environ.get("FACTCHECKING_TEMPLATE_ID")

UPLOAD_S3_BUCKET = os.environ.get("UPLOAD_S3_BUCKET")

# Discord integration
DISCORD_GUILD_ID = os.environ.get("DISCORD_GUILD_ID")
DISCORD_BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN")
DISCORD_APP_PUBLIC_KEY = os.environ.get("DISCORD_APP_PUBLIC_KEY")
DISCORD_CLIENT_ID = os.environ.get("DISCORD_CLIENT_ID")
DISCORD_CLIENT_SECRET = os.environ.get("DISCORD_CLIENT_SECRET")
DISCORD_OAUTH_SCOPES = "identify email"
DISCORD_TESTSOLVE_CHANNEL_ID = os.environ.get("DISCORD_TESTSOLVE_CHANNEL_ID")
DISCORD_HYPE_CHANNEL_ID = os.environ.get("DISCORD_HYPE_CHANNEL_ID")
DISCORD_TESTSOLVE_HYPE_CHANNEL_ID = os.environ.get("DISCORD_TESTSOLVE_HYPE_CHANNEL_ID")
DISCORD_CATEGORY_PREFIX = "üß©‚è´ü§ñ "

PUZZUP_URL = os.environ.get("PUZZUP_URL", "")
